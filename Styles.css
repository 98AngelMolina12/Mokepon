
@import url('https://fonts.googleapis.com/css2?family=Arimo:wght@600&family=Cabin:ital@1&family=Fira+Sans:ital,wght@0,900;1,400&family=Kanit&family=Lato:wght@700&family=Mulish&family=Playpen+Sans:wght@500&family=Roboto+Condensed:ital,wght@1,500&family=Rowdies&family=Sometype+Mono&family=Space+Grotesk:wght@700&display=swap');

@import url('https://fonts.googleapis.com/css2?family=Arimo:wght@500;600&family=Cabin:ital@1&family=Fira+Sans:ital,wght@0,900;1,400&family=Kanit&family=Lato:wght@700&family=Mulish&family=Playpen+Sans:wght@500&family=Roboto+Condensed:ital,wght@1,500&family=Rowdies&family=Sometype+Mono&family=Space+Grotesk:wght@700&display=swap');

@import url('https://fonts.googleapis.com/css2?family=Arimo:wght@500;600&family=Cabin:ital@1&family=Fira+Sans:ital,wght@0,900;1,400&family=Kanit&family=Lato:wght@700&family=Mulish&family=PT+Sans+Narrow&family=Playpen+Sans:wght@500&family=Roboto+Condensed:ital,wght@1,500&family=Rowdies&family=Sometype+Mono&family=Space+Grotesk:wght@700&display=swap');

@import url('https://fonts.googleapis.com/css2?family=Arimo:wght@500;600&family=Cabin:ital@1&family=Fira+Sans:ital,wght@0,900;1,400&family=Kanit&family=Lato:wght@700&family=Mulish&family=PT+Sans+Narrow&family=Playpen+Sans:wght@500&family=Prompt&family=Roboto+Condensed:ital,wght@1,500&family=Rowdies&family=Sometype+Mono&family=Space+Grotesk:wght@700&display=swap');

body{

  background-color:#060818;
  
}


#div-selection-mokepon{

/*Elements position*/
  display:flex;
  justify-content: center;
  align-items: center;
  flex-flow: row;/*flex-flow combine "flex-direction" and "flex-wrap"*/
  gap:10px
    
}

header{

  /*personalzacion*/
  color:#12fcdd;
  font-size:150px;
  background-color:#0e0f0f;
  font-family: 'Arimo', sans-serif;;
  text-align: center;

}


#div-tittle{

  /*Elements position*/
  display: flex;
  flex-flow: column;
  align-items: center;


}


#subtittle{

  /* *Costume*/
    color: lightseagreen;
    font-size: 4rem;
    background: #070116;
    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;

  /* *size */
    width:45%;
    border-radius:20px;

  /* *position */
    padding:0 5% 0 5%;

  


}

#selection-button{
  
  /*Element position*/
  display:flex;
  align-items:center;
  flex-flow: column;
  justify-content: center;

}


#game-functionality{

  /*Elements position*/
    display:flex;
    justify-content:center;
    color:azure;
    align-items: center;/*align-items is a shorthand to use */
    flex-flow: column;
    flex:2,2,auto;
    gap:20px;

}

#span-elements{

  /*Element position*/
      display:flex;
    justify-content:center;
    color:azure;
    align-items: center;
    flex-flow:column;
    gap:10px;  

  /* *size*/
  
    
}
/*label de los inputs*/

#label-raykiou{

  /* *Costume*/
 color:#eb0909;
 
}

#label-crabster{

  /* *Costume*/

  color:deepskyblue;

}

#label-joka{

  /* *Costume*/
  color:lawngreen;
  
}

#label-rocker{

  /* *Costume*/
  color:darkgreen;

}

#label-quetzal{

  /*personalizacio*/
  color:aquamarine;

}

#label-truthler{

  /*personalizacio*/
  color:gray;

}

#Select{

  /* *Costume*/
  background-color:#1a1288;
  color:#1cc4a0;
  font-family:'PT Sans Narrow', sans-serif;;

  /* *Size*/
  font-size:18px;
  width:164px;
  height:68px;
  box-sizing: border-box;
  margin:55px;
  border-radius: 15%;

  /*Element position*/
  display: flex;
  justify-content: center;
  align-items: center;
}

#Combat-Tittle{

  font-size: large;
  color:red;


}

.fire{

  /* *Size*/
    width:145px;
    height: 75px;
    border-radius:10%;
    font-size:22px;

  /* *Costume*/
    background-color: #e20a0a;
    color:azure;
    font-family:'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif ;
}

.Fire{

  /* *Costume*/
    color: #e20a0a;

}

.ice{

  /* *Size*/
  width:145px;
  height: 75px;
  border-radius:10%;
  font-size:22px;

  /* *Costume*/
  background-color: #043783;
  color:azure;
  font-family:'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif ;

}


.Ice{

  color:#043783;

}


.earth{

  /* *Size*/
  width:145px;
  height: 75px;
  border-radius:10%;
  font-size:22px;

  /* *Costume*/
  background-color: #0ae227;
  color:azure;
  font-family:'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif 
}

.Earth{

  color:#0ae227;

}


.steel{

   /* *Size*/
   width:145px;
   height: 75px;
   border-radius:10%;
   font-size:22px;
 
   /* *Costume*/
   background-color: #838884;
   color:azure;
   font-family:'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif 

}

.Steel{

  color:#838884;

}


.thunder{

   /* *Size*/
   width:145px;
   height: 75px;
   border-radius:10%;
   font-size:22px;
 
   /* *Costume*/
   background-color: #e4d50a;
   color:azure;
   font-family:'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif 

}

.Thunder{

  color:#e4d50a;

}


.air{

   /* *Size*/
   width:145px;
   height: 75px;
   border-radius:10%;
   font-size:22px;
 
   /* *Costume*/
   background-color: #0ae49b;
   color:azure;
   font-family:'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif 

}

.Air{

  color:#0ae49b;

}


.water{

   /* *Size*/
  width:145px;
  height: 75px;
  border-radius:10%;
  font-size:22px;
  
   /* *Costume*/
  background-color:#0d1f85;
  color:azure;
  font-family:'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif 

}

.Water{

  color:#0d1f85;

}


#attack-buttons{

/* *Size*/
margin-top: 20px;

  /* *Position*/

  display:flex;
  justify-content: center;
  flex-flow: row;
  gap:15px;
}

#input-rename-mokepon{

  /* *Size*/
  width: 285px;
  height: 25px;
  border-radius:7%;
  margin:20px 0 20px 0;
  font-size:26px;

  /* *Costume*/
  background-color:#73e9b2;
  color:#0521a0;
  font-family:'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;

  /* *Position*/
  text-align: center;
}

#Rename-mokepon{

    /* *Costume*/
      background-color: #19d6c6;
      color:#0c0b50;
      font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;
  
    /* *Size*/
      font-size: 29px;
      height:40px;
      width:175px;
      border-radius: 15px 15px 15px 15px;

}

#label-rename-button{

  /* *Costume*/
  color:#0fd392;
  font-size: 34px;
  font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;

}

#rename-button{

  /* *costume*/
    color:#1ddf2d;
    background-color: #000000;
    font-size: 25px;
    font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;

  /* *size */
    width: 234px;
    height: 25px;
    border-radius: 11px 11px 11px 11px;


}



#life-score-Player{

  /* *position */
  grid-area:1/2/1/3;

  /* *costume */
font-size: 28px;
font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;

}

#VersusMessage{

  /* *Position */
  grid-area:1/3/1/4;
  justify-self: center;
  align-self: center;

  /* *Costume */
  color: #18dba1;
  font-family:'Prompt', sans-serif;;

  /* *Size */
  font-size: 75px;


}


#life-score-enemy{

  /* *Position*/
    grid-area:1/4/1/5;

/* *Costume */
  font-size: 28px;
  font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;

}

#imageMkEnemy{

  grid-area:1/5/1/6;

}


.life-score{

  /* *Size*/
  width: 320px;
  height: 478px;
  border-radius:8%;

  /* *Costume*/
  background-color: #031b1f;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  font-size: 20px;
  color:aliceblue;

  /* *position */
  text-align: center;

}

#div-lifes-game{

/* *Position*/
display: grid;
grid-template-columns: repeat(5,1fr);
grid-template-rows: 1fr;
gap:25px;
}

#defeat-tittle{

  /* *Costume*/
  color:#04da81;
  font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;

  /* *Size*/
  font-size: 48px;

}

#new-game{

  /* *Size*/
    width:278px;
    height:75px;
    font-size: 32px;

  /* *Costume*/
    color:#d6ec0e;
    font-family:Arial, Helvetica, sans-serif;
    background-color:#9804bd;
    border-radius: 4% 4% 4% 4%;

  /* *Position */
    grid-area:1/3/1/4;
    align-self: end;
    justify-self: center;
    margin: 0 0 68px 0;

}

.label-mokepon{

  /* *costume*/
  background-color:#007599;
  border:#01061d solid 0.6rem;
  font-family:'Arimo', sans-serif ;
  
  /* *Size*/
  font-size:2.4rem;
  border-radius: 12% 12% 12% 12%;

  /* *position*/
  text-align: center;


}

.button-selection-mokepon{

  display: none;

}

.button-selection-mokepon:checked + .label-mokepon{
  background-color: #07b1a3;
}

.spanTurns{

  color:#beac0d;
  font-size: 2.4rem;

}

#No-Rename-Mokepon{

  /* *Costume*/
  background-color: #19d6c6;
  color:#0c0b50;
  font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;

/* *Size*/
  font-size: 0.8rem;
  height:15%;
  width:34%;
  border-radius: 15px 15px 15px 15px;


}


@media(max-width:965px){

  #div-selection-mokepon{

    flex-flow: column;

  }

  #attack-buttons{

    flex-flow: column;
    justify-content: center;
    align-items: center;

  }

  .label-mokepon{

    width:66%;
    height:102%;
    display: flex;
    flex-flow:row;
    font-size: 2.6rem;

  }

  .image-label-mokepon{

    justify-self: start;

  }

  .name-label-mokepon{

    align-self: center;
    justify-self: end;

  }

  #subtittle{

    font-size:1.8rem;
    height: 4%;
    width:63%;
    display: flex;
    justify-content: center;

  }

}

@media(max-width:780px){

  .label-mokepon{

    width:56%;
    height:102%;
    font-size:1.3rem;

  }

  .image-label-mokepon{

    width:54%;

  }

  #main-tittle{

    font-size:4rem;

  }

  #mokeponMap{

    width: 450px;
    height: 450px;

  }

}

.atackMessage{

  /* *Costume*/
  color: #c05252;

  /* *Size*/
  font-size:0.4rem;

}

#mapContainer{

  display:flex;
  justify-content: center;
  align-items: center;
  flex-flow: column;

  gap:17%;

  color:#42b68f;
  font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;
  font-size:1.3rem;

}

#mokeponMap{

  /** Costume*/
  border: white 3px solid;
  
  background-repeat: no-repeat;
  
}


/*nota del cap 37, podemos modificar la propiedad "margin, añadiendo hasta 4 valores que determinan cada lado
del margen, en el sentido de las manecillas del reloj

seria algo asi : 

margin:"margin-top" "margin-right" "margin-bottom" "margin-left"

osea que al poner valores modificaria las propiedades en el orden que mostre arriba

margin:10px 23px 22px 56px;

*/


/*Para aprender mejor css esta css reference*/


/*NOTA DEL CAP 32

Hay 3 tipos de selectores en css (los selectores son las formas en la que conectamos elementos html para estilizarlos, de tipo(mismos nombre de la etiqueta), clase, y de id

Para aprender mejor css esta css reference*/

/*NOTA CAP 33
En css tenemos principalmente:2,2,auto displays
display block, display inline

Los elementos de tipo Block se le puede manipular el ancho(width) y el alto (height) 

Los elementos de tipo inline no se le puede manipular el ancho(width) ni el alto(height) 

Podemos modificar valores las propiedades en css solo escribiendo la primera letra de la propiedad y el valor numerico que le queremos asignar

ejemplo

w234 (width:234px;)
p68 (padding:68px;)
h25 (height:25px;)

y luego le presionamos tab y el resto del texto se generará rapidamente
*/

/*selector de tipo*/

/*NOTA DOCUMENTACION CSS TRICKS::
To manipulate align-items or "inline elements" we have the properties flex-grown(adjust
automatically the size),flex-shrink(to shrink automacally the align-items) and flex-basis(that is only
the size that will have the element when the space in the container is distributed).

a short hand for this is only use "flex:2,2,auto,4,12%" that just with this, the first value will
be aplied toward "grow" property, the second to "shrink" property and thirth to "basis" property */

/*Trick with align-self

align-self is useful when we want to change the position of a singular item in our parent element*/


/* 5 FORMAS DE CENTRAR EN CSS

1)

#Judas{

width:fit-content;
  margin: 0 auto;
}
  este metodo tiene la limitacion de requerir un Size definido, y que el elemento este en vertical
  

:2,2,auto)

    #Pedro{

  text-align:center;

    }
  solo nos vale si hay una linea definida , ya que lo que hace es que el Size de la linea coincida con el Size del contendor


  3)

    #Angel{

  position:aboslute;
  top:50%;
  left:50%
  transform :translate(-50%, -50%);

    }

  este metodo consiste en modificar directamente el anclaje por defecto de css (esquina superior izquierda) con el atributo de que esta posicion sea absoluta, y al transladar los valores absolutos que fijamos la imagen cambiara su anclaje por defecto hasta alli.


  4)

  #Juan{

  display:flex;
  justify-content:center;
  align-items: center;
  }

  Este metodo es moderno, y nos sera util para la gran mayoria de cosas que queramos centrar con css

  5)

  #last{

    display grid;
  }

  .last.grid-item{

    align-items:center;

    justify-italign-items:center;

}

    la forma con grid nos da mayor cantidad de herramientas para manipular nuestro elemento en proyectos mas complejos, pero el flex es tambien bastante versatil

  */

/*NOTA CAP 37
we can use "Pinterest" to get ideas from web design
Use "fonts google" to the fonts
And "color hunt" to good color paletes*/

/*HOME WORK READ ABOUT "IMPORT" IN CSS

CAP 37 IN 7:51*/

/* Cap 41 CSS GRID


CSS grid nos permite ubicar elementos para ubicar en horizontal y vertical a la  vez

a trick with grid is use repeat that let us aply the same values for a lot of new columns or row that we could need to create

.container {
  display: grid;
  grid-auto-flow: column dense;

  grid-template-columns: repeat(4, [col] 1fr);
  grid-template-rows: repeat(5, [row] 150px);
}

  LONG FORM

  .container {
  display: grid;
  grid-auto-flow: column dense;

  grid-template-columns:
    [col] 1fr
    [col] 1fr
    [col] 1fr
    [col] 1fr;
  grid-template-rows:
    [row] 150px
    [row] 150px
    [row] 150px
    [row] 150px
    [row] 150px;
}

A useful trick when we want to aply a gap toward our grid elements is use only "gap", and aply the row gap and the column gap 

.container {

  "standard" 
  gap: <grid-row-gap> <grid-column-gap>;


  "old"
  grid-gap: <grid-row-gap> <grid-column-gap>;
}

example

.container {
  grid-template-columns: 100px 50px 100px;
  grid-template-rows: 80px auto 80px; 
  gap: 15px 10px;
}


PLACE ITEMS

place-items sets both the align-items and justify-items properties in a single declaration.

we aplied the place items seing like the first value that we put aplied like "align-items" and the second like "justify-items".

example

.contentExample{
  display:grid;
  place-items:center start;
}

This can be very useful for super quick multi-directional centering.

PLACE CONTENT

its a property  that combine "justify-content"" and "align-content" and let us aply the both properties ,first taking values like "align-content, and before "justify-content"

example:

.placeContentExample{
  display:grid;
  place-content:start space-between;

}

A little useful value that we could use to auto fill or auto fit the size of our grid templates its with "auto-fill" and "auto-fit"

example

#ex{
  
  display:grid;
  grid-template-column:repeat(auto-fill,10px);
  grid-template-row:repeat(auto-fit,10px);

}

this is so useful because you don´t need to put a number of elements, only you can put "auto-fill" or "auto-fit" and it will works to all  your elements

the diferences in 2 methods is that "auto-fill" create as many tracks as be necesary but never go out the grid.

And "auto-fit" create the tracks only into the grid item placement, and after of that, the rest of tracks repeated will colapse, and will be created out of the grid.


GRID PROPERTIE:

we use this to set the position of our elements into the grid aplying the propertie grid-template-row and grid-template-column at the same time in one propertie 

example:

.cont{

  grid:2px 32px / 2fr 4fr;

}


AUTO-GRID PROPERTIE:

is a useful propertie that we use to reply values or set specific values automacally in our grid when we exceed the number of rows or columns in the grid

example:

#tulas{

  grid-auto-rows:234px;
  grid-auto-columns:300px;

}

-



A special values to set the size into our columns or row are "auto-flow","auto", "row-dense", "column-dense"


for resposive desing we have to use media querys to that, we could use it to separate how our html and css sees in other dispositives

*/

/* a little trick is that we can concat multiple elements or classes putting a scope like this:

  #julio,#Pedro{
  
    color:red;

  }

Antes me daba miedo comenzar a aprender CSS pero desde que tomo estas clases ya me siento más seguro y motivado para seguir aprendiendo 😊😊😊

Algo que me ayudo bastante fue darle en la Consola a Device toolbar para visualizar la página en diferentes resoluciones Ojalá les sirva 💚 💚


cap 43:Pseudo clases en css:

  Las pseudo clases son los atributos que css usa para estilizar las acciones de un usuario respecto a un elemento html

  por ejemplo:

  inputs html:
  :hover = representa cuando el cursor se posa sobre un boton o un elemento
  :active = representa cuando por ejemplo le damos click a un boton
  :checked = representa cuando nuestro input ya fue clickeado

  tambien por ejemplo podemos concatenar los estilos de elementos hermanos en nuestro html, por ejemplo un label y un input
*/